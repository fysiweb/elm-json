name: CI
on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
    branches: [master]

jobs:
  # test:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       # os: [windows-latest, ubuntu-latest, macos-latest]
  #       os: [ubuntu-latest]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           ~/.rustup
  #           target
  #         key: ${{ runner.os }}
  #     - run: rustup component add clippy
  #     - run: rustup component add rustfmt-preview
  #     - run: cargo test --locked
  #     - run: cargo clippy --all-targets --all-features
  #     - run: cargo fmt --all -- --check
  build:
    # needs: test
    # TODO: uncomment when verified to work
    # if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - name: OSX
            os: macos-latest
            target: x86_64-apple-darwin
          - name: Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
    env:
      CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER: arm-linux-gcc
      CC_armv7_unknown_linux_musleabihf: arm-linux-gcc
      CXX_armv7_unknown_linux_musleabihf: arm-linux-g++
      LD_armv7_unknown_linux_musleabihf: arm-linux-ld
      RUSTFLAGS: "-C link-arg=-s"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install MUSL target
        if: ${{ matrix.name == 'Linux' }}
        run: sudo apt update && sudo apt install musl-tools
      - uses: actions/checkout@v2
      - run: rustup target add ${{ matrix.target }}
      - run: cargo build --release --target ${{ matrix.target }} --locked
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/heads\//}
        shell: bash
      - run: tar czvf elm-json-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release elm-json.exe
        if: ${{ matrix.name == 'Windows' }}
      - run: tar czvf elm-json-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release elm-json
        if: ${{ matrix.name != 'Windows' }}
      - name: Store binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: elm-json-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz
          path: elm-json-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz
